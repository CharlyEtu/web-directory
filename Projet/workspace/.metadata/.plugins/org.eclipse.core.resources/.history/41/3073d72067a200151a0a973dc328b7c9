package webdir.main.web.imp;

import java.util.Collection;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.MatrixVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import webdir.main.business.services.IPersonService;
import webdir.main.model.Group;
import webdir.main.model.Person;
import webdir.main.web.IHomeController;

@Controller()
@RequestMapping("*")
public class HomeController extends WebDirController implements IHomeController {

	/** Service d'accès aux personnes */
	private IPersonService personServ;
    
    @PostConstruct
    public void init() {
    	super.init();
    	personServ.init();
    }
    
    @PreDestroy
    public void close() {
    	//personServ.close();
    }
    
    @Autowired
    public void setPersonServ(IPersonService personServ) {
    	this.personServ = personServ;
    }
    
    public IPersonService getPersonServ() {
    	return personServ;
    }

    @RequestMapping(value="/home", method = RequestMethod.GET)
    public ModelAndView printHome() {
    	Collection<Person> pList;
    	ModelAndView home = getModelAndView("home");
    	
    	logger.info("Home page printing with " + this);
        
    	/* Acquisition et ajout de la liste des personnes */
        pList = personServ.getAllPersons();
        // Vérification de la bonne réception
        if(pList == null)
        	return errorPage("L'acquisition de la liste des personnes de l'annuaire à échouée.");
        home.addObject("personIterator", pList.iterator());
        
        /* Acquisition et ajout de la liste des groupes */
        Collection<Group> gList = groupServ.getAllGroups();
        // Vérification de la bonne réception
        if(gList == null)
        	return errorPage("L'acquisition de la liste des groupes de l'annuaire à échouée.");
        home.addObject("groupIterator", gList.iterator());
        
        return home;
    }
    
    @RequestMapping(value="/usersheet{id}", method = RequestMethod.GET)
    public ModelAndView printPersonSheet(@MatrixVariable long id) {
    	ModelAndView sheet = getModelAndView("sheet");
    	
    	if(userInfo.isAuthenticated()) {
	    	try {
	    		sheet.addObject("person", personServ.getPerson(id));
			} catch (Exception e) {
				logger.error("Requested person not found (Person id : " + id + ". "
								+ "Controller : " + this);
				errorPage("Désolé, la personne demandée est introuvable.");
			}
    	}
    	else
    		return errorPage("Désolé, vous devez être connecté à un compte utilisateur"
    				+ " pour voir ces informations");
    	
    	return sheet;
    }
}