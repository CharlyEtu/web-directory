package webdir.main.web.imp;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.MatrixVariable;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import webdir.main.business.services.IPersonService;
import webdir.main.business.services.IUserService;
import webdir.main.business.services.imp.UserService;
import webdir.main.model.Group;
import webdir.main.model.Person;
import webdir.main.web.imp.PersonValidator;

@Controller
@RequestMapping("/usersheet{id}")
public class UserSheetController extends WebDirController {
	
	/** Service d'accès aux personnes */
	private IPersonService personServ;
	
	@Autowired
    PersonValidator personValidator;
	
	@Autowired
    IUserService userService;
	
	@PostConstruct
    public void init() {
    	super.init();
    	personServ.init();
    }
    
    @PreDestroy
    public void close() {
    	//personServ.close();
    }
    
    public IPersonService getPersonServ() {
    	return personServ;
    }
    
    @Autowired
    public void setPersonServ(IPersonService personServ) {
    	this.personServ = personServ;
    }
    
    @ModelAttribute
    public Person newPerson() {
    	return new Person();
    }
    
    /***   Liste des groupes ***/	
	 @ModelAttribute("groups")
    public Map<Integer, String> productTypes() {
        
    	Map<Integer, String> groups = new LinkedHashMap<>();
    	
        for(Group group: groupServ.getAllGroups()){
        	 groups.put((int) group.getGroupID(), group.getName()); 	
        }
        return groups;
	 }

	@RequestMapping(method = RequestMethod.GET)
    public ModelAndView printPersonSheet(@MatrixVariable long id) {
    	ModelAndView sheet = getModelAndView("sheet");
    	
    	if(userInfo.isAuthenticated()) {
	    	try {
	    		sheet.addObject("person", personServ.getPerson(id));
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("Requested person not found (Person id : " + id + ". "
								+ "Controller : " + this);
				errorPage("Désolé, la personne demandée est introuvable.");
			}
	    	
	    	return sheet;
    	}
    	else
    		return warningPage("Vous devez être connecté à votre compte "
    				+ "utilisateur pour avoir accès à cette page.");
    }
	
	/*@RequestMapping(value="/edit", method = RequestMethod.GET)
	public ModelAndView sheetEdition(@ModelAttribute Person person) {
		Person person = null;
		
		try {
			person = personServ.getPerson(userInfo.getId());
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Requested person for edition not found (Person id : "
					+ userInfo.getId() + ". Controller : " + this);
			errorPage("Désolé, la personne demandée est introuvable.");
		}
		
		ModelAndView mav = getModelAndView("editsheet");
		mav.addObject("person", person);
		return mav;
	}
	
	@RequestMapping(value="/edit", method = RequestMethod.POST)
	public ModelAndView editSheet(@ModelAttribute Person person,
	BindingResult res) {
		//VALIDER DONNEES
		
		personServ.updatePerson(userInfo, person);
		
		return getModelAndView("redirect:/usersheet");
	}*/
	
	/***   GET  ***/	
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView editGet(@ModelAttribute Person p) throws NumberFormatException, Exception {
	    logger.info("Running " + this);
	    
	    Person userProfil = personServ.getPerson(userInfo.getId());
		ModelAndView modelAndView = new ModelAndView("editsheet");
		
		modelAndView.addObject("firstname", userProfil.getFirstname());
		modelAndView.addObject("lastname", userProfil.getLastname());
		modelAndView.addObject("email", userProfil.getEmail());
		
		String date = new SimpleDateFormat("yyyy-MM-dd").format(userProfil.getBirthdate());
		
		modelAndView.addObject("birthdate", date);
		
		
	    return modelAndView;
	}
	
	/*** POST **/
	@RequestMapping(value = "/edit", method = RequestMethod.POST)
    public ModelAndView editPost(@ModelAttribute Person person,
    BindingResult result, HttpServletRequest request)
    throws NumberFormatException, Exception {
    	
    	personValidator.validate(person, result, request);
    	
    	if (result.hasErrors()) {
    		
    		Person userProfil = personServ.getPerson(userInfo.getId());
    		ModelAndView modelAndView = new ModelAndView("editsheet");
    		
    		modelAndView.addObject("firsname", userProfil.getFirstname());
    		modelAndView.addObject("lastname", userProfil.getLastname());
    		modelAndView.addObject("email", userProfil.getEmail());
    		String date = new SimpleDateFormat("yyyy-MM-dd").format(userProfil.getBirthdate());
    		modelAndView.addObject("birthdate", date);
               
    		return modelAndView;
        }
    	
    	
    	
    	person.setId(userInfo.getId());
    	
    	if(!request.getParameter("group_").isEmpty()){
    	    Group group =  groupServ.getGroup(new Integer(request.getParameter("group_")));
    	    person.setGroup(group);
    	}
    	
    	String date_s = request.getParameter("date");
		SimpleDateFormat dt = new SimpleDateFormat("yyyy-mm-dd");
		Date birthdate = dt.parse(date_s);
		
    	person.setBirthdate(birthdate);
    
    	personServ.updatePerson(userInfo, person);
        return  new ModelAndView("usersheet");
    }
	
	/********************************************************
	  *   				User Service                         *
	  *                   (Mail)                             *
	  ********************************************************/ 
	 
	 
	  /***   GET  ***/
	 @RequestMapping(value = "/changepwd", method = RequestMethod.GET)
	 public ModelAndView passwordGet(@ModelAttribute UserService userService) throws NumberFormatException, Exception {
        logger.info("Running " + this);
        
		ModelAndView modelAndView = new ModelAndView("password");
		
        return modelAndView;
    } 
	 
	     /***   POST  ***/
	 @RequestMapping(value = "/changepwd", method = RequestMethod.POST)
	 public ModelAndView passwordPost(@ModelAttribute UserService userService) throws NumberFormatException, Exception {
        logger.info("Running " + this);
        
		ModelAndView modelAndView = new ModelAndView("success_pass");
		
		this.userService.sendUserPassword(userInfo.getId());
        return modelAndView;
    } 
}
