package webdir.main.web.imp;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import webdir.main.model.AuthenticationForm;
import webdir.main.web.IAuthenticationController;

@Controller()
@RequestMapping("/signin")
public class AuthenticationController extends WebDirController 
	implements IAuthenticationController {
	
	/** Validateur d'authentification */
	private AuthenticationValidator validator;
	
	/**
	 * Initialiser le controller
	 */
	@PostConstruct
	@Override
	public void init() {
		super.init();
		validator.init();
	}
	
	/**
	 * Fermer le controller
	 */
	@PreDestroy
	@Override
	public void close() {
		//groupServ.close();
		validator.close();
	}
	
	/**
	 * Obtenir le validateur d'authentification.
	 * @return Le validateur.
	 */
	public AuthenticationValidator getValidator() {
		return validator;
	}
	
	/**
	 * Affecter le validateur d'authentification.
	 * @param validator Le validateur à affecter.
	 */
	@Autowired
	public void setValidator(AuthenticationValidator validator) {
		this.validator = validator;
	}
	
	@ModelAttribute
	public AuthenticationForm newForm() {
		return new AuthenticationForm();
	}
	
    @RequestMapping(method = RequestMethod.GET)
    public ModelAndView printSignIn(@ModelAttribute AuthenticationForm form) {
    	logger.info("SignIn page printing with " + this);
    	
    	return getModelAndView("signin");
    }
    
    /**
     * FIXME Trouver le moyen pour que le mot de passe ne soit pas envoyé en clair,
     * 		 lors de la réponse au formulaire d'authentification.  
     */
    @RequestMapping(method = RequestMethod.POST)
    public ModelAndView authenticate(@ModelAttribute AuthenticationForm form, BindingResult res) {
    	validator.validate(form, res);
    	
    	if(res.hasErrors())
    		return getModelAndView("signin");
    	else {
    		userInfo.setAuthenticated(true);
    	}
    	
    	ModelAndView mav = getModelAndView("redirect:/home");
    	mav.addObject("userInfo", userInfo);
    	return mav;
    }
}
